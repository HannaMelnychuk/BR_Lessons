Beet Seed 


1
Waterfall
- Легка структура і послідовність. (Наступний єтап починаєтсья тільки після завершення поперднього.)
- Чітка документація кожного єтапу (легко відстежувати прогрес)
- Чітке розподілення процессів.
-Не гнучка модель (важко впровадити щось нове, особоливо якщо єтап вже завершено)
- Пізно починається тестування (Тестувальник включаеться в роботу тільки на своему єтапі, після розробки, що збільшує ризики помилок, а це підвишчує ціну, і час розробки)
- Не ітераційний підхід, можна побачити тільки кінцевий результат. (Який може не відповісти очікуванням  замовника і користувача)
Загалом доцільна до будь якої галузі, але переважно для проектів з чітким плануванням, строками і високою відповідальністю (Медичні,авіаційні, державні технологіі тощо)
2
V-Model
- Послідовність.
- Чітка документація.
- Чітке розподілення процессів.
- Тестування проводиться на кожному єтапі, що знижує ризики і покращує якість продукту.
- Висока якість продукту.
-Не гнучка модель (важко впровадити щось нове, особоливо якщо єтап вже завершено)
-Не ітераційний підхід, можна побачити тільки кінцевий результат. (Який може не відповісти очікуванням  замовника і користувача)
Також через високу якість, чіткість доцільна до державних, медичних, фінансових, авіаційних проектів.
3
Scrum
- Гнучка модель (легко впровадити нові задачі, через те що маються спрінти, після завершення якого встановлюється новий список задач)
-Чітка командна робота і залученість до процессу(маються daily meetings, scrum muster який контролює процесс)
-Ітераційний підхід (після кожного спринту ми маємо реузльтат, який можемо оцінювати, отримувати зворотній зв’язок від замовника, щось фіксити та вносити зміни, це добре впливає на кінцеву якість продукту)


-Постійна коммунікація з замовником(може вповільнити процесс розробки, бо фідбек важливий щоб розуміти що важливіше для бізнеса на цьому єтапі)
- Не має фіксованого часу і бюджету (Часто замовникам потрібно більше конкретики)
- Багато зустрічей з командою( Іноді це може затягуватись,та забирати робочий час)
-Потреба у підготованій команді, всі повинні розуміти принцип роботи, а також повинен бути Scrum майстер, для керування проектом, це ускладнює впровадження методу.
IT-розробка, стартапи, додатки, інтернет магазини (через швидке виведення продукту на ринок завядки ітерацийному підхіду)
4
Kanban
-Проста для розуміння модель ( візуальна дошка, задачі з пріорітетами)
- Легко внести зміни( просто додаючи нову задачу на дошку,не рреба чекати завершення єтапів або спринту) 
- Підходить для підтримки проектів ( тому що немає строків виконання, а є поставлені задачі за пріорітетом)
-Немає фіксованого часу (незрозуміло коли продукт буде готовий)
-Потрібна команда з високою кваліфікацією і самоорганізацією (тому що немає мітінгів, і контролю як у скрамі)
Через структуру списку задач за пріорітетністю і відсутності часових обмежень підходить для техпідтримки, підтримки продуктів, оновленя продуктів. 




Beet Sprout

1.На твою думку, чому з’явився Agile-маніфест?

 Agile маніфест з’явився в 2001 році як реакція на труднощі при використанні традиційні жорстких моделей типу Waterfall і V-model. Ці підходи мали зафіксовані вимоги, велику кількість документаціі, структура не дозволяла легко вносити зміни, або зміни зовсім не вносились. Що приводило до затримок в розробці, не відповідності очікуванням замовника або користувача та високої ціни розробки.
Цей маніфест був створений для:
Фокусування роботи команди на результаті, на цінності для замовника и користувача.
Зробити роботу більш гнучкою для змін. 
Зменшити тиск від надмірної документаціі
Посилити співпрацю між замовником і командою, а також всередині самої команди.
Забезпечити швидкий зворотний зв’язок, щоб можна було своєчасно виявляти й виправляти помилки.


2.Які проблеми він мав вирішити і чи це вдалося?

Agile-маніфест мав вирішити проблеми традиційних моделей: жорсткі вимоги, надмірну документацію, слабку взаємодію з замовником і низьку командну комунікацію. 
Жорсткі вимоги — Agile дав можливість швидко адаптуватися до нових умов. На прикладі Scrum моделі ми бачимо, що після кожного спрінта ми маємо можливість внести зміни, при цьому не витрачаючи багато часу и грошей.
Надмірна документація — це уповільнювало процес,тепер акцент на працюючому продукті.
Слабка комунікація з замовником — продукт часто створювався без його участі,й у фіналі не відповідав очікуванням. Маніфест забезпечив постійну комунікацію та демонстрацію результатів після кожної ітерації. До прикладу після кожного спрінта, чи виконаної пріорітетної задачі ми маємо результат и отримуємо зворотній зв’язок.

Маніфест зробив процеси більш гнучкими, сфокусувався на працюючому продукті та співпраці. Загалом проблеми вдалося вирішити, хоча Agile не універсальний і найкраще працює коли потрібна адаптивність і є культура співпраці.

Mighty Beet 

Для розробки мобільного застосунку для обміну світлинами котиків:3, я б обрала методологію Kanban. Бо на мою думку цей підхід не потребує великих затрат фінансових і організаційних,  як до прикладу Scrum, де довелось би з початку навчати комнаду і наймати окрему людину на посаду майстра. В канбані все достатьно зрозуміло і не потребує додаткових витрат на організацію процесу, що дозволяє швидко стартувати.
Наявність пріорітетних задач полегшує оріентацію в процессі розробки, особливо коли команда невелика і у всіх декілька задач.
Також підхід гнучкий, дозволяє швидко робити зміни.
На мою думку складність тільки в пошуку організованих и достатньо кваліфікованих розробників, що підвишчує відповідльність під час найму працівників.
