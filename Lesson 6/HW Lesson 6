Beet Seed

1.Порівняльна таблиця


Що перевіряється
Коли застосовується
Обмеження
Особливості
Функціональне тестування
Чи правильно функціонує  система згідно функціональним вимогам. 
На будь-якому етапі розробки для перевірки функціоналу; перед релізом
Не перевіряє продуктивність, безпеку, юзабіліті
- Може бути ручним або автоматизованим
-Перевіряє що система робить
Нефункціональне тестування
Тестуємо поведінку системи:продуктивність, безпеку, підтримку, юзібіліті, сумісніть тощо
Під час тестування готового функціоналу або окремих компонентів
Не перевіряє бізнес-логіку або правильність функцій
-Може потребувати спеціальних інструментів, середовищ або великих обсягів даних
- Перевіряє як система працює, а не що виконує
-Часто автоматизоване, бо скалдне для ручного тестування (навантаження, стабільність, час виконання)
Тестування пов’язане зі змінами
Тестуємо чи не зламали існуючий функціонал внесені зміни/ або чи полагодили зламаний функціонал
Після внесення змін, виправлень багів або нового релізу
Може пропустити нові баги, не пов’язані зі змінами
-Орієнтоване на швидке виявлення критичних помилок після змін.
-Включає re-testing, smoke, sanity, regression
-Обмежене областю змін
- Часто автоматизоване, бо активно застосовується




2. Різниця між регресією та ретестингом

Регресійне тестування перевіряє вже працюючий функціонал після впровадження змін у код, метою є - впевнитись що зміни не зламали щось вже працююче. В цьому виді тестування ми не перевіряємо функціонал який містив дефект. 
Ретестинг  в свою чергу спрямований на повторне тестування функціоналу який містив дефект, після його виправлення. метою є - впевнитись що дефект був успішно виправлений. В цьому виді тестування вся увага приділяється повторному тестуванню виявленного раніше дефекту, для цього ми використовуємо колишній тест кейс/оновлюємо його/ створюємо новий.




Beet Sprout

2.Як ти вважаєш, чи можливе для продукту проведення тільки функціонального тестування, без перевірки нефункціональних вимог?

Я вважаю, що проведення тільки функціонального тестування недостатньо. У разі проведення тільки функціонального тестування, ми не можемо отримати повної інформаціі про якість продукту. Ми втрачаємо дуже важливі данні про стабільність роботи системи, її сумісність з іншими системами, зручність використання, безпеку данних, тощо.
До того ж нефункіональні вимог часто є не очевидними і там може знаходиться велика кількість дефектів, включно з критичними. Що  знову ж таки підвищить ризики репутаційні для бізнесу і збільшить фінансову скалдову проекту, бо усунення дефектів після релізу підвишчує коштовніть.
Для забезпечення високої якості продукту та мінімізації ризиків необхідно поєднувати функціональне та нефункціональне тестування.

3.Як ти розумієш необхідність проведення smoke (димового) тестування? Чи завжди воно є доречним?


На мою думку, smoke тестування необхідне. Бо саме після проведення невеликого набору пріорітетних тестів, ми маємо уявлення, чи працює найважливіший функціонал нового білду або після внесення змін в попередній. Результат smoke тестування допомагає вирішити, чи є доцільним проведення подальшого тестування. 
Але має значення і обсяг змін, якщо вони незначні, або не впливають на функціонал, то доречним буде виконати тільки якісь конкретні smoke тести. Та загалом якщо вони вже автоматизовані, то чому б і не виконати всі!
