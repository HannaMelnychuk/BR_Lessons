Must have рівень: 

Зроби порівняння статичних та динамічних технік тестування. Наведи переваги та можливі обмеження при використанні кожної з них. 

Статистична техніка тестування

Основна інформація:
Cпрямована на тестування ще не працюючого продукту (без запуску коду). Тестуємо документацію, аналізуємо вже написаний код.
Переваги:
- Зменшує ціну тестування.
- Виявлення дефектів на самому початку розробки.
- Покрщення якості документаціі.
- Налагодження процессів розробки, коммунікаціі, бо виявлення дефектів з початку може показати недоліки і знизи ризики іх повторення.
Обмеження:
- Довготривале, бо великий обсяг та робиться мануально
- Немає автоматизаціі
- Не виявляє дефекти пов’язані з логікою та виконанням


Динамічна техніка тестування
Основна інформація:
Спрямована на тестування функціональності  вже працюючого продукту. 

Переваги:
-Більш ретельне тестування, бо можемо оцінити результат та виявити неявні дефекти, які пропустили при дослідженні документаціі. 
- Можливе тестування з точки зору кінцевого користувача.
- Є можливість спрощення роботи автоматизованими тестами.
- Дає впевненість у працездатності продукту.
Обмеження:
- Довготривале, бо також великий обсяг для тестування, підготовка середовища, тестових даних.
- Висока вартість виправлення знайдених дефектів, і тестування 
- Тестування можливе здебільшого після заверешення розробки коду.

Висновок
Обидві техніки тестування є зручними и корисними в свій час. Вони мають застосовуватись комбіновано на ранніх етапах розробки - статичне,а на пізніх етапах - динамічне. 
У купі вони знижують ризики і вартість розробки, підвишчують якість 







Середній рівень:

Наступне твердження стосується покриття рішень:
Коли код має одну ‘IF” умову, не має циклів (LOOP)  або перемикачів (CASE), будь-який тест, який ми виконаємо, дасть результат 50% покриття рішень (decision coverage). 

Яке твердження є коректним?
Коректно. Будь-який тест кейс надає 100% покриття тверджень, таким чином покриває 50% рішень. - ПРАВИЛЬНА ВІДПОВІДЬ
Коректно. Результат будь-якого тесту умови IF буде або правдими, або ні.
Некоректно. Один тест може гарантувати 25% перевірки рішень в цьому випадку.
Некоректно, бо занадто загальне твердження. Ми не можемо знати, чи є воно коректним, бо це залежить від тестованого ПЗ.

Є псевдокод: Switch PC on -> Start MS Word -> IF MS Word starts THEN -> Write a poem -> Close MS Word. 

Скільки тест кейсів знадобиться, щоб перевірити його функціонал? 
1 – для покриття операторів, 2 – для покриття рішень - ПРАВИЛЬНА ВІДПОВІДЬ
1 – для покриття операторів, 1 – для покриття рішень
2 – для покриття операторів, 2 – для покриття рішень
2 – для покриття операторів, 1 – для покриття рішень

Скільки потрібно тестів для перевірки тверджень коду:    
2
1 - ПРАВИЛЬНА ВІДПОВІДЬ
3
4


Програма максимум:

Виконай завдання двох попередніх рівнів.
Продовжуємо розвивати стартап для застосунку, який дозволяє обмінюватися фотографіями котиків.

Є алгоритм: 
Запитай, якого улюбленця має користувач. 
Якщо користувач відповість, що має кота, то запитай, яка порода його улюбленця: «короткошерста чи довгошерста?»
Якщо клієнт відповість «довгошерста», то запитай: «ви бажаєте отримати контакти найближчого грумера?»
Якщо клієнт відповість «так», то скажи: «Надайте адресу найближчої котячої перукарні»
Інакше
Скажи: «Запропонуй магазин з товарами по догляду за шерстю»
Закінчити
Інакше
Скажи «Запропонуй обрати магазин із зоотоварами»
Закінчити
Якщо клієнт не має кота
Скажи “Коли вирішите завести улюбленця – приходьте”
Закінчити

Завдання:
Намалюй схему алгоритму (в інструменті на вибір, наприклад, у вбудованому Google Docs редакторі, figjam чи miro)
Який потрібен мінімальний набір тест-кейсів, щоб переконатися, що всі запитання були поставлені, всі комбінації були пройдені та всі відповіді були отримані?

Відповідь
1.Схема алгоритму
2.  Мінімально 4 тест-кейси

    -Коли користувач не має кота
   - Коли користувач має короткошерстого кота
   - Коли користувач має довгошерстого кота і потребує контакти грумера
   - Коли користувач має довгошерстого кота і НЕ потребує контакти грумера

 
